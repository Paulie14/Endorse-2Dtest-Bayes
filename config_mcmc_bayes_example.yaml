# surrDAMH template (Bayesian inverse problem related to the TSX experiment)


# GENERAL SETTINGS:
no_parameters: 4 # number of parameters
no_observations: 24  # number of observations (WILL BE SET AUTOMATICALLY)
save_raw_data: true # save all data (including rejected samples)
save_transformed_data: true
debug: false # print debug messages (true/false)


# PRIOR DISTRIBUTION SETTINGS:
# internally, normal distribution is used
# if the prior distribution is not normal, transformations have to be specified
transformations:
- type: normal_to_lognormal
  options:
    mu: -32.747
    sigma: 1.0
- type: normal_to_lognormal
  options:
    mu: -17.391
    sigma: 1.0
- type: normal_to_lognormal
  options:
    mu: 26.0
    sigma: 1.2
- type: normal_to_lognormal
  options:
    mu: 18.6
    sigma: 1.2


# SAMPLING PROCESS SETTINGS:
initial_sample_type: prior # choice of initial samples for each chain (prior/lhs)
samplers_list: # stages of the sampling process (here MH, DAMH-SMU, DAMH)

# stage 1: initial surrogate model created during MH sampling
- type: MH # sampling algorithm (MH/DAMH)
  surrogate_is_updated: true
  proposal_std: 0.2
  max_samples: 10000
  time_limit: 120

# stage 2: DAMH algorithm with surrogate model updates
- type: DAMH
  surrogate_is_updated: true
  proposal_std: 0.4
  max_samples: 10000
  time_limit: 60

# stage 3: DAMH algorithm, surrogate model is no longer updated
- type: DAMH
  surrogate_is_updated: false
  proposal_std: 0.6
  max_samples: 10000
  time_limit: 60


# SOLVER SETTINGS (here Flow123d wrapper):
no_solvers: 20 # number of solvers running in parallel
solver_module_name: flow_wrapper
# solver_module_path WILL BE SET AUTOMATICALLY by process.py
solver_module_path: /home/paulie/Workspace/Endorse-2Dtest-Bayes/flow_wrapper.py
solver_init_name: Wrapper
solver_returns_tag: true # wrapper returns [convergence_tag, collected_values]
solver_parameters: {} # optional wrapper-specific parameters

# surrogate model settings:
surrogate_type: rbf # type of surrogate model (rbf/poly)
# polynominal surrogate model requires different parameters
surr_solver_parameters:
  kernel_type: 1
surr_updater_parameters:
  expensive: false
  kernel_type: 1
  no_keep: 500


# PARAMETERS OF THE BAYESIAN INVERSE PROBLEM:
# instead of problem_parameters["noise_std"], noise_type + noise_parameters + noise_grid is specified
noise_type: Gaussian_process
noise_parameters:
- &id001
  - 30
  - 50
- *id001
- *id001
- *id001
noise_grid: # WILL BE SET AUTOMATICALLY
- 0.0
- 10.0
- 18.0
- 23.0
- 28.0
- 30.0
problem_parameters:
# internal distribution (before transformation) is N(prior_mean,prior_std)
# if prior_mean and prior_std is not specified, default internal distribution is N(0,1)
# if noise is not Gaussian_process and noise_std is not specified, default noise distribution is N(0,1)
  prior_mean: # scalar/vector
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  prior_std: # scalar/vector/covariance matrix
  - 1.0
  - 1.0
  - 1.0
  - 1.0
  observations: # observations WILL BE SET AUTOMATICALLY by measured_data.py
  - 286.75249430532506
  - 647.505992837846
  - 772.4661385282469
  - 791.1077604157214
  - 783.6246889580977
  - 778.0634908088443
  - 315.51781659523283
  - 446.8545403913626
  - 532.3926678804722
  - 556.5910001244496
  - 574.2244347230497
  - 577.864509326157
  - 248.42112207763773
  - 56.84447114747088
  - 46.566220939536514
  - 44.06975877090735
  - 43.07970954731006
  - 43.38241440918836
  - 293.8407187697135
  - 187.16294744263965
  - 183.35544585553924
  - 187.34367102074373
  - 192.62865242900216
  - 194.68194576479527
